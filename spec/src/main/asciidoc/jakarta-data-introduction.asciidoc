= Jakarta Data Specification

Jakarta Data provides an API that makes data access easy. A
Java developer can split the persistence from the model with several features,
such as the ability to compose custom query methods on a Repository interface where the framework
will implement it.

== Introduction

There is no doubt about the importance of data around the application. We often talk about a stateless application, the data where we delegate the application's state. If the architecture is the mind, the information is the heart.

Dealing with a database is one of the biggest challenges within a software architecture. In addition to choosing one of several options on the market, it is necessary to consider the persistence integrations. Jakarta Data claims to make life easier for developers with Java.

=== Goals

Jakarta Data works in a tight integration between Java and a persistence layer, where it has those goals of the specification:

* Be a persistence agnostic API; therefore, through abstractions, it will connect different types of databases and storage sources.
* Be a pluggable and extensible API; even when the API won't support a particular behavior of a storage engine, it might provide an extensible API to make it possible.

=== Non-Goals

As with any software component, those decision brings trade-offs and bring those points as a non-goal:

* Have specific features of JPA, NoSQL, and so on. Those APIs have their specifications.
* Replace the Jakarta JPA or NoSQL specification. Indeed, the API will work as a component to be an agnostic API.

=== Conventions
